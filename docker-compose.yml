version: "3.8"

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - web-server
      - authentication
      - player-management
      - chat
      - webrtc-signaling
      - game-logic
      - world-server
      - assets
      # - gateway
    networks:
      - backend

  web-server:
    build:
      context: ./services/web-server
      dockerfile: Dockerfile
    ports:
      - "3000:8000"
    volumes:
      - ./services/web-server/public:/usr/src/app/public
    networks:
      - backend
    environment:
      DB_USER: user
    env_file:
      - .env

  authentication:
    build:
      context: ./services/authentication
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      NODE_ENV: production
    env_file:
      - .env
    networks:
      - backend

  chat:
    build:
      context: ./services/chat
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      NODE_ENV: production
    env_file:
      - .env
    networks:
      - backend

  game-logic:
    build:
      context: ./services/game-logic
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      NODE_ENV: production
    env_file:
      - .env
    networks:
      - backend

  player-management:
    build:
      context: ./services/player-management
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    environment:
      NODE_ENV: production
      AUTH_SERVICE_URL: http://authentication:3000
    env_file:
      - .env
    networks:
      - backend
    volumes:
      - player_data:/usr/src/app/data
      - ./services/player-management/logs:/usr/src/app/logs

  # gateway:
  #   build:
  #     context: ./services/gateway
  #   ports:
  #     - "8000:8000"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - world-server-1
  #     - world-server-2
  #     - game-log

  assets:
    build:
      context: ./services/assets
      dockerfile: Dockerfile
    ports:
      - "8078:8000"
    environment:
      NODE_ENV: production
    env_file:
      - .env
    networks:
      - backend
    # volumes:
    #   - ./services/assets/assets:/usr/src/app/assets

  webrtc-signaling:
    build:
      context: ./services/webrtc-signaling
      dockerfile: Dockerfile
    ports:
      - "8080:8000"
    networks:
      - backend

  world-server:
    build:
      context: ./services/world-server
      dockerfile: Dockerfile
    ports:
      - "9000:8000"
    environment:
      NODE_ENV: production
      GAME_LOGIC_SERVICE_URL: http://game-logic:8003
      REDIS_HOST: redis
      REDIS_PORT: 6379
    env_file:
      - .env
    depends_on:
      - redis
      - game-logic
    networks:
      - backend

  # world-server-2:
  #   build:
  #     context: ./services/world-server
  #     dockerfile: Dockerfile
  #   ports:
  #     - "9002:9000"
  #   environment:
  #     NODE_ENV: production
  #     REDIS_HOST: redis
  #   env_file:
  #     - .env
  #   depends_on:
  #     - redis
  #   networks:
  #     - backend

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  backend:
    driver: bridge

volumes:
  player_data:
